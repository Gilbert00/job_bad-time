#!/bin/bash
#
# v 0.5.0
#
#DONE BUG: In class/<Pol>/schedule/<Sched>/days third fileld is Duration, not EndSec!
#

if [ $# -lt 2 ] || [ $# -gt 3 ]; then
  echo -e "Usage: $(basename $0) <policy> <client> \n   or  $(basename $0) <policy> <client> 1"
  exit 1
fi

# get master name
# check policy if it is exists
# check client if it is exists in policy
# get current time
# check current time to Schedulers intervals
# if not:
#   select active jobs with our policy,client
#   check scheduler for curr-time
#   cancel their
#   send mail to admins
#  TO-DO: Exclude Dates
#  TO-DO: Include Dates
#
# job_bad-time test_job_break dssmng15 1

##Debug on# set -x  #!!!!

Policy=$1
Client=$2
if [ $# -eq 3 ] && [ $3 -eq 1 ] ; then
  DoCancel=1
else
  DoCancel=0
fi  

echo "Start date $(date +%Y.%m.%d_%H:%M:%S)"

Err="***Error***: "

Dir=/usr/openv/netbackup/db/class
SubDir=/schedule

readonly DirNBadminCMD=/usr/openv/netbackup/bin/admincmd
PlList=$DirNBadminCMD/bppllist

Master=$(sed -n '1P' /usr/openv/netbackup/bp.conf | sed -n 's/SERVER = //p')
#echo $Master

FilePolActive="/tmp/$(basename $0)_${Policy}_A_$$.tmp"
FilePolScheds="/tmp/$(basename $0)_${Policy}_Scheds_$$.tmp"
FileMail="/tmp/$(basename $0)_${Policy}_Mail_$$.tmp"

readonly DaySecs=$((3600*24))
readonly cInInterval=0
readonly cOutInterval=1

#---------------------------
#---------------------------

function check_policy()
{
  Pol=$1
  N=`$PlList | grep "$Pol"| wc -l`
  if [ $N -eq 0 ]; then
    echo "${Err}Policy $Pol don't exists !"
	return 1
  fi  
  return 0
}

#---------------------------
function check_client()
{
  Pol=$1
  Cli=$2
  local CliFile="$DirPolicy/clients"
#  echo "CliFile:$CliFile"
  if [[ ! -f $CliFile ]]; then
    echo "${Err}Clients are absent in Policy $Pol !"
    return 1
  fi
  
  local N=$(grep -i "$Cli" $CliFile | wc -l)
  if [ $N -eq 0 ]; then
    echo "${Err}Client $Cli don't exists in $Pol !"
	return 2
  fi 
  
  return 0
}

#---------------------------
#---------------------------
function check_interval()
# Beg Dur TimeSec
{
  local Beg=$1
  local Dur=$2
  local TimeSec=$3
	local End
  
  let End=Beg+Dur
  
  if [[ $Beg -le $TimeSec ]] && [[ $TimeSec -le $End ]]; then
    return $cInInterval
  else
    return $cOutInterval  
  fi
} 

#---------------------------
function check_time()
# $SchedWin $WeekID $TimeSec
{
  local arrWin=($1)
  local WeekID=$2
  local TimeSec=$3
  #local DaySecs=3600*24
  
  local iBeg=$((WeekID*2))
  local iDur=$((iBeg+1))
#  local FullSec=$((DaySecs*WeekID+TimeSec))
  
  local Beg
  local Dur
	
	for ((i=0; i<7; i++))
	do
		Beg=${arrWin[iBeg]}
    Dur=${arrWin[iDur]}
		if [[ $Beg -ne 0 ]] || [[ $Dur -ne 0 ]]; then 
		
	    FullSec=$((DaySecs*i+TimeSec))

      check_interval $Beg $Dur $FullSec
      if [[ $? -eq $cInInterval ]]; then
        return $cInInterval
      fi		
		fi
		
#		$((iBeg-=2))
		iBeg=$((iBeg-2))
	  [[ $iBeg -lt 0 ]] && iBeg=12 
	  iDur=$((iBeg+1))
	done
	    
  return $cOutInterval
}
#---------------------------
#---------------------------

function day_to_sec()
# $date
{
  echo -n "$(date -u --date=$1 +%s)"
}
#--------------------------

function check_dates()
# "$SchedDates" $FullDay
{
#  local arrDates=($1)
  local Dates=$1
	local Day=$2
	local Secs=$(day_to_sec $Day)
	
	for Dat in $Dates
	do
    if [[ $Secs -eq $Dat ]]; then
      return $cOutInterval		
	  fi
	done
	
	return 0
}
#---------------------------

function check_month_days()
# $SchedMonthDays $DayOnly
{
  local Days=$1
	local OurDay=$2
	
	for D in $Days
	do
    if [[ $OurDay -eq $D ]]; then
      return $cOutInterval		
	  fi	
	done
	
	return 0
}
#---------------------------

function check_week_days()
# "$SchedWeekDays" $DayOnly
{
  local WeekDays=$1
	local OurDay=$2
#	local DaysSplit=$(echo -n "$WeekDays" | awk '{split($0,arr,";"); len=; res=""; for(i in arr) res=res " " arr[i]; print res}') 
  local DaysSplit=${WeekDays//;/ }
	
  local NDay=$((OurDay % 7 + 1))
  local NWeek=$((OurDay / 7 + 1))	
	local SymDayWeek=$(printf "%1s,%1s" "$NDay" "$NWeek")
	
	for DW in $DaysSplit
	do
    if [[ $SymDayWeek == $DW ]]; then
      return $cOutInterval		
	  fi	
	done
	
	return $cInInterval
}
#---------------------------
#---------------------------

ZabbixPref=""

function init_zabbix()
{
  ZabbixPref="Master:$Master Policy:$Policy Client:$Client"
}
#---------------------------

function send_to_zabbix()
{
  local OutStr
  if [[ $DoCancel -eq 1 ]]; then
    OutStr="$ZabbixPref Job:$1 is canceled at $(date +%Y.%m.%d_%H:%M)"
  else
    OutStr="$ZabbixPref Job:$1 has left the set time"
  fi

  /usr/bin/zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k netbackup_bad_job_time -o "$OutStr"
	/usr/bin/zabbix_sender -c /etc/zabbix/zabbix_agent2.conf -s $(hostname) -k bad.job.time -o "$OutStr"
}
#---------------------------
#---------------------------

MailLine=0

function start_mail()
{
  echo "" > $FileMail
  echo "The Jobs has left the set time" >> $FileMail
  echo "Master:$Master" >> $FileMail
  echo "Policy:$Policy" >> $FileMail 
  echo "Client:$Client" >> $FileMail
}

#---------------------------
function add_to_mail()
{
  ((MailLine++))
  if [[ $DoCancel -eq 1 ]]; then
    echo "Job:$1 is canceled at $(date +%Y.%m.%d_%H:%M)"  >> $FileMail
  else
    echo "Job:$1 has left the set time"  >> $FileMail
  fi
}

#---------------------------
function send_mail()
{
  if [[ $MailLine -eq 0 ]]; then
    return 0
  fi	
  
  mailx -s "Jobs are outside the specified time" backup_group@vtb.ru < $FileMail
  return 0
}
#---------------------------
#---------------------------

function bad_time()
{
  echo "JobID:$JobID"
  if [[ $DoCancel -eq 1 ]]; then
	  $DirNBadminCMD/bpdbjobs -cancel $JobID
  fi
  add_to_mail $JobID
  send_to_zabbix	 $JobID
}
#---------------------------

function check_sched()
# $Policy $JobSched $CurrTime $JobID
{
	local Pol=$1
	local Sched=$2
	local CT=$3
	local JobID=$4
	local arrCT=($(echo $CT | awk -F_ '{print $1,$2,$3,$4,$5}'))
	local WeekID=${arrCT[0]}
	local Hour=${arrCT[1]}
	Hour=$(echo $Hour | sed  s'/^0//')
	local Minuts=${arrCT[2]}
	Minuts=$(echo $Minuts | sed  s'/^0//')
	local Seconds=${arrCT[3]}
	Seconds=$(echo $Seconds | sed  s'/^0//')
	local FullDay=${arrCT[4]}
	local DayOnly=$(echo $FullDay | awk -F- '{print $3}')
	local TimeSec=$(((Hour*60+Minuts)*60+Seconds))
	local Line

	$DirNBadminCMD/bpplsched $Pol -l > $FilePolScheds
	
	local SchedIsFound=0

	while read Line
	do
    if [[ $Line =~ SCHED\  ]]; then
	    SchedName=$(echo $Line | awk '{print $2}')
	    echo "SchedName:$SchedName"
	    if [[ $Sched == $SchedName ]]; then
		    SchedIsFound=1
	    else 	
	      SchedIsFound=0
	    fi
		  continue
	  fi
		
	  if [[ $SchedIsFound -eq 1 ]]; then
	    if [[ $Line =~ ^SCHEDCALEDATES ]]; then
				len=$(expr length "SCHEDCALEDATES ")
				local SchedDates=${Line:$len}
				check_dates "$SchedDates" $FullDay
				if [[ $? -eq $cOutInterval ]]; then
					bad_time
				fi
		  elif [[ $Line =~ ^SCHEDCALEDAYOWEEK ]]; then
				len=$(expr length "SCHEDCALEDAYOWEEK ")
				local SchedWeekDays=${Line:$len}
			  check_week_days "$SchedWeekDays" $DayOnly
				if [[ $? -eq $cOutInterval ]]; then
					bad_time
				fi				
		  elif [[ $Line =~ ^SCHEDCALEDAYOMONTH ]]; then
				len=$(expr length "SCHEDCALEDAYOMONTH ")
				local SchedMonthDays=${Line:$len}
        check_month_days "$SchedMonthDays" $DayOnly
				if [[ $? -eq $cOutInterval ]]; then
					bad_time
				fi				
		  elif [[ $Line =~ ^SCHEDWIN ]]; then	
				len=$(expr length "SCHEDWIN ")
				local SchedWin=${Line:$len}   
				check_time "$SchedWin" $WeekID $TimeSec
				if [[ $? -eq $cOutInterval ]]; then
					bad_time
				fi
				break
			fi
#			break
	  else
      continue	  
	  fi

	done < $FilePolScheds
}

#---------------------------
#---------------------------
# Main function

#echo Policy:$Policy
check_policy $Policy
if [[ $? -gt 0 ]]; then
  exit 1
fi

DirPolicy=$Dir/$Policy
DirSched=$DirPolicy$SubDir
#echo DirPolicy:$DirPolicy
#echo DirSched:$DirSched
if [[ ! -d $DirPolicy ]]; then
  echo "$DirPolicy: no such directory !"
  exit 2
elif [[ ! -d $DirSched ]]; then 
  echo "$DirSched: no such directory !"
  exit 3
fi

OldDir=$(pwd)
cd $DirSched

#echo Client:$Client
check_client $Policy $Client
if [[ $? -gt 0 ]]; then
  exit 4
fi

CurrTime=$(date +%w_%H_%M_%S_%Y-%m-%d)

$DirNBadminCMD/bpdbjobs -ignore_parent_jobs -gdm  | awk -F, '{if ($3==1) $4="A" ; if ($4=="A") print $1,$4,$5,$6,$7}' | grep -E "$Policy" > $FilePolActive

start_mail
init_zabbix

while read Line
do
  arrJob=($Line)
  JobID=${arrJob[0]}
  JobPol=${arrJob[2]}
  JobSched=${arrJob[3]}
  JobCli=${arrJob[4]}
  
  if [[ $JobCli == $Client ]]; then
    check_sched $Policy $JobSched $CurrTime $JobID
  
  fi
done < $FilePolActive

send_mail

echo -e "Ended date $(date +%Y.%m.%d_%H:%M:%S)\n"

cd $OldDir
exit 0
